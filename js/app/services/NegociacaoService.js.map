{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_httpService","url","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","errorMsg","all","getNegociacoesSemana","getNegociacoesSemanaAnterior","getNegociacoesSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","error","negociacao","getConnection","connection","dao","add","deleteAllLocalNegotiations","getLocalNegotiations","listaNegociacoes","getNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\r\nimport { ConnectionFactory } from \"./ConnectionFactory\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\r\nimport { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoService {\r\n\r\n\t/*\r\n\t\tRecebe uma função callback baseada em Error-First-Callback\r\n\r\n\t\tA convenção é que cada callback receba sempre o erro no primeiro parâmetro. \r\n\t\tNa função callback, basta então verificar esse parâmetro para saber se ocorreu um erro ou não!\r\n\t\r\n\t\tgetNegociacoesSemana(cb) {\r\n\r\n\t\t    let xhr = new XMLHttpRequest();\r\n\t\t\txhr.open('GET', 'negociacoes/anterior');\r\n\r\n\t\t\txhr.onreadystatechange = () => {\r\n\t\t\t\tif(xhr.readyState == 4) {\r\n\t              if(xhr.status == 200) {\r\n\r\n\t                cb(null, JSON.parse(xhr.responseText)\r\n\t                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t            } else {\r\n\t\t                console.log(xhr.responseText);\r\n\t\t                cb('Não foi possível obter as negociações da semana anterior', null);\r\n\t\t            }\r\n\t\t        }\r\n\t\t    }\r\n\r\n\t\t    xhr.send();\r\n\t\t}\r\n\r\n\t\tChamando a função acima\r\n\r\n\t\tgetNegociacoesSemana((erro, negociacoes) => {\r\n\t\t\tif(erro) {\r\n\t\t\t\tconsole.log('error');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tnegociacoes.forEach() {\r\n\t\t\t\tlogica inserida aqui\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t*/\r\n\r\n\tconstructor() {\r\n\t\tthis._httpService = new HttpService();\r\n\t}\r\n\r\n\tgetNegociacoesSemana() {\r\n\r\n\t\tlet url = 'negociacoes/semana';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/semana service');\r\n\t\t\t\t\t//console.log(negociacoes);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana');\r\n\t\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tgetNegociacoesSemanaAnterior() {\r\n\r\n\t\tlet url = 'negociacoes/anterior';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/anterior service');\r\n\t\t\t\t\t//console.log(negociacoes)\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana anterior');\r\n\t\t\t\t});\r\n\r\n\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tgetNegociacoesSemanaRetrasada() {\r\n\r\n\t\tlet url = 'negociacoes/retrasada';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/retrasada service');\r\n\t\t\t\t\t//console.log(negociacoes);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana retrasada');\r\n\t\t\t\t});\r\n\r\n\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tgetNegociacoes() {\r\n\r\n\t\treturn Promise.all(\r\n\t\t\t[\r\n\t\t\t\tthis.getNegociacoesSemana(),\r\n\t\t\t\tthis.getNegociacoesSemanaAnterior(),\r\n\t\t\t\tthis.getNegociacoesSemanaRetrasada()\r\n\t\t\t]\r\n\t\t)\r\n\t\t.then(periodos => {\r\n\r\n\t\t\tlet negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo, []))\r\n\t\t\t\t\t\t\t\t\t\t.map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n\r\n\t\t\treturn negociacoes;\r\n\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tthrow new Error(error);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tadicionar(negociacao) {\r\n\t\t\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.add(negociacao))\r\n\t\t\t.then(() => 'Negociação cadastrada com sucesso')\r\n\t\t\t.catch(error => {\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(`Error to create a new trade ${error}`);\r\n\t\t\t\t\r\n\t\t\t\tthrow new Error('Erro para cadastrar uma nova negociação');\r\n\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\tremoverTodas() {\r\n\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.deleteAllLocalNegotiations())\r\n\t\t\t.then(() => 'Foram removidas todas as negociações')\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(`Error to delete Negotiations ${error}`);\r\n\t\t\t\tthrow new Error('Erro para apagar as Negociações');\r\n\t\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tlistar() {\r\n\r\n\t\t// Fillout Negotiations List with Local Data\r\n\t\t/* Verbose Mode:\r\n\t\t\tConnectionFactory.getConnection()\r\n\t\t\t\t.then(connection => {\r\n\r\n\t\t\t\t\tnew NegociacaoDao(connection)\r\n\t\t\t\t\t\t.getLocalNegotiations()\r\n\t\t\t\t\t\t.then((negociacoes) => {\r\n\r\n\t\t\t\t\t\t\tnegociacoes.forEach(negociacao => {\r\n\r\n\t\t\t\t\t\t\t\tthis._listaNegociacoes.adicionar(negociacao);\r\n\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => this._mensagem.texto = `Erro para carregar as Negociações Localmente: ${error}`);\r\n\r\n\t\t\t\t})\r\n\t\t*/\r\n\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.getLocalNegotiations())\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(`Error to get Local Negotiations ${error}`);\r\n\t\t\t\tthrow new Error('Erro para carregar Negociações Localmente');\r\n\t\t\t});\t\t\r\n\r\n\t}\r\n\r\n\timportarDaAPI(listaNegociacoes) {\r\n\r\n\t\treturn this.getNegociacoes()\r\n\t\t\t.then(negociacoes =>\r\n\t\t\t\tnegociacoes.filter(negociacao =>\r\n\t\t\t\t\t!listaNegociacoes.negociacoes.some(negociacaoExistente =>\r\n\t\t\t\t\t\tJSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(`Error to import trades from API ${error}`);\r\n\t\t\t\tthrow new Error('Erro para importar as negociações através da API');\t\t\t\t\r\n\t\t\t})\t\r\n\r\n\t}\r\n\r\n}"]}
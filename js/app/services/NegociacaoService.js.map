{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HttpService","url","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","errorMsg","all","getNegociacoesSemana","getNegociacoesSemanaAnterior","getNegociacoesSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","add","deleteAllLocalNegotiations","getLocalNegotiations","listaNegociacoes","getNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\r\nimport { ConnectionFactory } from \"./ConnectionFactory\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\r\nimport { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoService {\r\n\r\n\t/*\r\n\t\tRecebe uma função callback baseada em Error-First-Callback\r\n\r\n\t\tA convenção é que cada callback receba sempre o erro no primeiro parâmetro. \r\n\t\tNa função callback, basta então verificar esse parâmetro para saber se ocorreu um erro ou não!\r\n\t\r\n\t\tgetNegociacoesSemana(cb) {\r\n\r\n\t\t    let xhr = new XMLHttpRequest();\r\n\t\t\txhr.open('GET', 'negociacoes/anterior');\r\n\r\n\t\t\txhr.onreadystatechange = () => {\r\n\t\t\t\tif(xhr.readyState == 4) {\r\n\t              if(xhr.status == 200) {\r\n\r\n\t                cb(null, JSON.parse(xhr.responseText)\r\n\t                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t            } else {\r\n\t\t                console.log(xhr.responseText);\r\n\t\t                cb('Não foi possível obter as negociações da semana anterior', null);\r\n\t\t            }\r\n\t\t        }\r\n\t\t    }\r\n\r\n\t\t    xhr.send();\r\n\t\t}\r\n\r\n\t\tChamando a função acima\r\n\r\n\t\tgetNegociacoesSemana((erro, negociacoes) => {\r\n\t\t\tif(erro) {\r\n\t\t\t\tconsole.log('error');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tnegociacoes.forEach() {\r\n\t\t\t\tlogica inserida aqui\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t*/\r\n\r\n\tconstructor() {\r\n\t\tthis._httpService = new HttpService();\r\n\t}\r\n\r\n\tgetNegociacoesSemana() {\r\n\r\n\t\tlet url = 'negociacoes/semana';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/semana service');\r\n\t\t\t\t\t//console.log(negociacoes);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana');\r\n\t\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tgetNegociacoesSemanaAnterior() {\r\n\r\n\t\tlet url = 'negociacoes/anterior';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/anterior service');\r\n\t\t\t\t\t//console.log(negociacoes)\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana anterior');\r\n\t\t\t\t});\r\n\r\n\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tgetNegociacoesSemanaRetrasada() {\r\n\r\n\t\tlet url = 'negociacoes/retrasada';\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis._httpService\r\n\t\t\t\t.get(url)\r\n\t\t\t\t.then(negociacoes => {\r\n\t\t\t\t\t//console.log('negociacoes/retrasada service');\r\n\t\t\t\t\t//console.log(negociacoes);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(errorMsg => {\r\n\t\t\t\t\tconsole.log(errorMsg);\r\n\r\n\t\t\t\t\treject('Não foi possível obter as negociações da semana retrasada');\r\n\t\t\t\t});\r\n\r\n\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tgetNegociacoes() {\r\n\r\n\t\treturn Promise.all(\r\n\t\t\t[\r\n\t\t\t\tthis.getNegociacoesSemana(),\r\n\t\t\t\tthis.getNegociacoesSemanaAnterior(),\r\n\t\t\t\tthis.getNegociacoesSemanaRetrasada()\r\n\t\t\t]\r\n\t\t)\r\n\t\t.then(periodos => {\r\n\r\n\t\t\tlet negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo, []))\r\n\t\t\t\t\t\t\t\t\t\t.map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n\r\n\t\t\treturn negociacoes;\r\n\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tthrow new Error(error);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tadicionar(negociacao) {\r\n\t\t\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.add(negociacao))\r\n\t\t\t.then(() => 'Negociação cadastrada com sucesso')\r\n\t\t\t.catch(error => {\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(`Error to create a new trade ${error}`);\r\n\t\t\t\t\r\n\t\t\t\tthrow new Error('Erro para cadastrar uma nova negociação');\r\n\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\tremoverTodas() {\r\n\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.deleteAllLocalNegotiations())\r\n\t\t\t.then(() => 'Foram removidas todas as negociações')\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(`Error to delete Negotiations ${error}`);\r\n\t\t\t\tthrow new Error('Erro para apagar as Negociações');\r\n\t\t\t});\t\t\r\n\r\n\t}\r\n\r\n\tlistar() {\r\n\r\n\t\t// Fillout Negotiations List with Local Data\r\n\t\t/* Verbose Mode:\r\n\t\t\tConnectionFactory.getConnection()\r\n\t\t\t\t.then(connection => {\r\n\r\n\t\t\t\t\tnew NegociacaoDao(connection)\r\n\t\t\t\t\t\t.getLocalNegotiations()\r\n\t\t\t\t\t\t.then((negociacoes) => {\r\n\r\n\t\t\t\t\t\t\tnegociacoes.forEach(negociacao => {\r\n\r\n\t\t\t\t\t\t\t\tthis._listaNegociacoes.adicionar(negociacao);\r\n\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => this._mensagem.texto = `Erro para carregar as Negociações Localmente: ${error}`);\r\n\r\n\t\t\t\t})\r\n\t\t*/\r\n\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDao(connection))\r\n\t\t\t.then(dao => dao.getLocalNegotiations())\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(`Error to get Local Negotiations ${error}`);\r\n\t\t\t\tthrow new Error('Erro para carregar Negociações Localmente');\r\n\t\t\t});\t\t\r\n\r\n\t}\r\n\r\n\timportarDaAPI(listaNegociacoes) {\r\n\r\n\t\treturn this.getNegociacoes()\r\n\t\t\t.then(negociacoes =>\r\n\t\t\t\tnegociacoes.filter(negociacao =>\r\n\t\t\t\t\t!listaNegociacoes.negociacoes.some(negociacaoExistente =>\r\n\t\t\t\t\t\tJSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(`Error to import trades from API ${error}`);\r\n\t\t\t\tthrow new Error('Erro para importar as negociações através da API');\t\t\t\t\r\n\t\t\t})\t\r\n\r\n\t}\r\n\r\n}"]}
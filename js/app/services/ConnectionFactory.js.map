{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","databaseName","databaseVersion","databaseStores","connection","closeConnection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","data","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,eAAe,gBAArB;AACA,QAAMC,kBAAkB,CAAxB;AACA,QAAMC,iBAAiB,CAAC,cAAD,CAAvB;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,kBAAkB,IAAtB;;AAEA;;;;;;;AAUA;;AAEI;AACA,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,wDAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,YAAtB,EAAoCC,eAApC,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,gBAAQ;;AAElCd,0CAAkBe,aAAlB,CAAgCC,KAAKC,MAAL,CAAYC,MAA5C;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,gBAAQ;;AAE5B,4BAAG,CAACf,UAAJ,EAAgB;;AAEZA,yCAAaY,KAAKC,MAAL,CAAYC,MAAzB;;AAEA;AACAb,8CAAkBD,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAlB;;AAEA;AACAA,uCAAWgB,KAAX,GAAmB,YAAY;AAC3B,sCAAM,IAAId,KAAJ,0CAAN;AACH,6BAFD;AAIH;;AAEDE,gCAAQJ,UAAR;AAEH,qBAlBD;;AAoBAM,gCAAYY,OAAZ,GAAsB,gBAAQ;;AAE1BC,gCAAQC,GAAR,8BAAuCR,KAAKC,MAAL,CAAYQ,KAAnD;;AAEAhB,+BAAOO,KAAKC,MAAL,CAAYQ,KAAZ,CAAkBC,IAAzB;AAEH,qBAND;AAQH,iBAtCM,CAAP;AAwCH;AAjDL;AAAA;AAAA,0CAmDyBtB,UAnDzB,EAmDqC;;AAE7BD,+BAAewB,OAAf,CAAuB,iBAAS;;AAE5B,wBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5C1B,mCAAW2B,iBAAX,CAA6BD,KAA7B;AACH;;AAED1B,+BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,iBARD;AAUH;AA/DL;AAAA;AAAA,oCAiEmB;;AAEX,oBAAG7B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AAEJ;AAxEL;;AAAA;AAAA;AA2EH,CA/FuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["// Applied Module Pattern\r\nvar ConnectionFactory = (function () {\r\n\r\n    const databaseName = 'bmorenos-frame';\r\n    const databaseVersion = 1;\r\n    const databaseStores = ['negotiations'];\r\n    \r\n    var connection = null;\r\n\r\n    var closeConnection = null;\r\n\r\n    /*\r\n\r\n        #####################\r\n\r\n            Framework for IndexedDB https://dexie.org/\r\n        \r\n        #####################\r\n\r\n    */\r\n    \r\n    return class ConnectionFactory {\r\n    \r\n        // avoiding developers to create instances of this class\r\n        constructor() {\r\n            throw new Error(`Create Instances of ConnectionFactory is not allowed`);\r\n        }\r\n    \r\n        static getConnection() {\r\n    \r\n            return new Promise((resolve, reject) => {\r\n    \r\n                let openRequest = window.indexedDB.open(databaseName, databaseVersion);\r\n    \r\n                openRequest.onupgradeneeded = data => {\r\n    \r\n                    ConnectionFactory._createStores(data.target.result);\r\n                    \r\n                };\r\n                \r\n                openRequest.onsuccess = data => {\r\n                    \r\n                    if(!connection) {\r\n                        \r\n                        connection = data.target.result;\r\n\r\n                        // Create a Bind to Connection and save the function to close a connection\r\n                        closeConnection = connection.close.bind(connection);\r\n        \r\n                        // Monkey Patch to block users to close a connection\r\n                        connection.close = function () {\r\n                            throw new Error(`You cannot close a connection directly`);\r\n                        }\r\n                        \r\n                    }\r\n\r\n                    resolve(connection);\r\n    \r\n                };\r\n                \r\n                openRequest.onerror = data => {\r\n    \r\n                    console.log(`error to get connection ${data.target.error}`);\r\n    \r\n                    reject(data.target.error.name);\r\n                    \r\n                };\r\n                \r\n            });\r\n    \r\n        }\r\n        \r\n        static _createStores(connection) {\r\n            \r\n            databaseStores.forEach(store => {\r\n    \r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n    \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n    \r\n            });\r\n    \r\n        }\r\n\r\n        static close() {\r\n\r\n            if(connection) {\r\n                closeConnection();\r\n                connection = null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}) ();"]}
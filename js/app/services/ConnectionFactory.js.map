{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["databaseName","databaseVersion","databaseStores","connection","closeConnection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","data","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,eAAe,gBAArB;AACA,IAAMC,kBAAkB,CAAxB;AACA,IAAMC,iBAAiB,CAAC,cAAD,CAAvB;;AAEA,IAAIC,aAAa,IAAjB;;AAEA,IAAIC,kBAAkB,IAAtB;;IAEaC,iB,WAAAA,iB;;AAET;AACA,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,wDAAN;AACH;;;;wCAEsB;;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,YAAtB,EAAoCC,eAApC,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,gBAAQ;;AAElCT,sCAAkBU,aAAlB,CAAgCC,KAAKC,MAAL,CAAYC,MAA5C;AAEH,iBAJD;;AAMAR,4BAAYS,SAAZ,GAAwB,gBAAQ;;AAE5B,wBAAI,CAAChB,UAAL,EAAiB;;AAEbA,qCAAaa,KAAKC,MAAL,CAAYC,MAAzB;;AAEA;AACAd,0CAAkBD,WAAWiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAlB;;AAEA;AACAA,mCAAWiB,KAAX,GAAmB,YAAY;AAC3B,kCAAM,IAAId,KAAJ,0CAAN;AACH,yBAFD;AAIH;;AAEDE,4BAAQL,UAAR;AAEH,iBAlBD;;AAoBAO,4BAAYY,OAAZ,GAAsB,gBAAQ;;AAE1BC,4BAAQC,GAAR,8BAAuCR,KAAKC,MAAL,CAAYQ,KAAnD;;AAEAhB,2BAAOO,KAAKC,MAAL,CAAYQ,KAAZ,CAAkBC,IAAzB;AAEH,iBAND;AAQH,aAtCM,CAAP;AAwCH;;;sCAEoBvB,U,EAAY;;AAE7BD,2BAAeyB,OAAf,CAAuB,iBAAS;;AAE5B,oBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C3B,+BAAW4B,iBAAX,CAA6BD,KAA7B;AACH;;AAED3B,2BAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,aARD;AAUH;;;gCAEc;;AAEX,gBAAI9B,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AACH;AAEJ;;;;;;AAGL;;AAEA","file":"ConnectionFactory.js","sourcesContent":["const databaseName = 'bmorenos-frame';\r\nconst databaseVersion = 1;\r\nconst databaseStores = ['negotiations'];\r\n\r\nlet connection = null;\r\n\r\nlet closeConnection = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    // avoiding developers to create instances of this class\r\n    constructor() {\r\n        throw new Error(`Create Instances of ConnectionFactory is not allowed`);\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(databaseName, databaseVersion);\r\n\r\n            openRequest.onupgradeneeded = data => {\r\n\r\n                ConnectionFactory._createStores(data.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onsuccess = data => {\r\n\r\n                if (!connection) {\r\n\r\n                    connection = data.target.result;\r\n\r\n                    // Create a Bind to Connection and save the function to close a connection\r\n                    closeConnection = connection.close.bind(connection);\r\n\r\n                    // Monkey Patch to block users to close a connection\r\n                    connection.close = function () {\r\n                        throw new Error(`You cannot close a connection directly`);\r\n                    }\r\n\r\n                }\r\n\r\n                resolve(connection);\r\n\r\n            };\r\n\r\n            openRequest.onerror = data => {\r\n\r\n                console.log(`error to get connection ${data.target.error}`);\r\n\r\n                reject(data.target.error.name);\r\n\r\n            };\r\n\r\n        });\r\n\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        databaseStores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    static close() {\r\n\r\n        if (connection) {\r\n            closeConnection();\r\n            connection = null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// Applied Module Pattern\r\n\r\n/* Removed Module Pattern of old versions of javascript \r\n\r\nvar ConnectionFactory = (function () {\r\n\r\n    const databaseName = 'bmorenos-frame';\r\n    const databaseVersion = 1;\r\n    const databaseStores = ['negotiations'];\r\n    \r\n    var connection = null;\r\n\r\n    var closeConnection = null;\r\n\r\n    \r\n\r\n        #####################\r\n\r\n            Framework for IndexedDB https://dexie.org/\r\n        \r\n        #####################\r\n\r\n    \r\n    \r\n    return class ConnectionFactory {\r\n    \r\n        // avoiding developers to create instances of this class\r\n        constructor() {\r\n            throw new Error(`Create Instances of ConnectionFactory is not allowed`);\r\n        }\r\n    \r\n        static getConnection() {\r\n    \r\n            return new Promise((resolve, reject) => {\r\n    \r\n                let openRequest = window.indexedDB.open(databaseName, databaseVersion);\r\n    \r\n                openRequest.onupgradeneeded = data => {\r\n    \r\n                    ConnectionFactory._createStores(data.target.result);\r\n                    \r\n                };\r\n                \r\n                openRequest.onsuccess = data => {\r\n                    \r\n                    if(!connection) {\r\n                        \r\n                        connection = data.target.result;\r\n\r\n                        // Create a Bind to Connection and save the function to close a connection\r\n                        closeConnection = connection.close.bind(connection);\r\n        \r\n                        // Monkey Patch to block users to close a connection\r\n                        connection.close = function () {\r\n                            throw new Error(`You cannot close a connection directly`);\r\n                        }\r\n                        \r\n                    }\r\n\r\n                    resolve(connection);\r\n    \r\n                };\r\n                \r\n                openRequest.onerror = data => {\r\n    \r\n                    console.log(`error to get connection ${data.target.error}`);\r\n    \r\n                    reject(data.target.error.name);\r\n                    \r\n                };\r\n                \r\n            });\r\n    \r\n        }\r\n        \r\n        static _createStores(connection) {\r\n            \r\n            databaseStores.forEach(store => {\r\n    \r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n    \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n    \r\n            });\r\n    \r\n        }\r\n\r\n        static close() {\r\n\r\n            if(connection) {\r\n                closeConnection();\r\n                connection = null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}) ();\r\n\r\n*/"]}
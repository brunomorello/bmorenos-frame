{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negotiation","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","target","error","openCursor","negotiationsList","currentPosition","result","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;AAAA;;;;IAEaA,a,WAAAA,a;AAET,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,cAAd;AAEH;;;;4BAEGC,W,EAAa;AAAA;;AAEb,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,WAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrB;AACAN;AACH,iBAHD;;AAKAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBN,uDAAiCO,EAAEC,MAAF,CAASC,KAA1C;AACH,iBAFD;AAIH,aAhBM,CAAP;AAkBH;;;+CAEsB;AAAA;;AAEnB,mBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGTc,UAHS,EAAd;;AAKA,oBAAIC,mBAAmB,EAAvB;;AAEAV,wBAAQI,SAAR,GAAoB,aAAK;;AAErB,wBAAIO,kBAAkBL,EAAEC,MAAF,CAASK,MAA/B;;AAEA,wBAAGD,eAAH,EAAoB;AAChB;AACA,4BAAIf,cAAce,gBAAgBE,KAAlC;;AAEA;AACAH,yCAAiBI,IAAjB,CAAsB,IAAIC,sBAAJ,CAAenB,YAAYoB,KAA3B,EAAkCpB,YAAYqB,WAA9C,EAA2DrB,YAAYsB,MAAvE,CAAtB;;AAEA;AACAP,wCAAgBQ,QAAhB;AAEH,qBAVD,MAUO;AACH;AACArB,gCAAQY,gBAAR;AACH;AAEJ,iBAnBD;;AAsBAV,wBAAQK,OAAR,GAAkB,aAAK;AACnBN,gEAA0CO,EAAEC,MAAF,CAASC,KAAnD;AACH,iBAFD;AAIH,aAnCM,CAAP;AAqCH;;;qDAE4B;AAAA;;AAEzB,mBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGTyB,KAHS,EAAd;;AAKApB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,mDAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB;AAAA,2BAAKN,4DAA0DO,EAAEC,MAAF,CAASC,KAAnE,CAAL;AAAA,iBAAlB;AAEH,aAXM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n        \r\n        this._connection = connection;\r\n        this._store = 'negotiations';\r\n\r\n    }\r\n\r\n    add(negotiation) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negotiation);\r\n            \r\n            request.onsuccess = e => {\r\n                //console.log(`success to insert object`); \r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject(`Error to Insert Object ${e.target.error}`);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    getLocalNegotiations() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negotiationsList = [];\r\n\r\n            request.onsuccess = e => {\r\n\r\n                let currentPosition = e.target.result;\r\n\r\n                if(currentPosition) {\r\n                    // storing current negotiation\r\n                    let negotiation = currentPosition.value;\r\n\r\n                    // pushing it to array\r\n                    negotiationsList.push(new Negociacao(negotiation._data, negotiation._quantidade, negotiation._valor));\r\n\r\n                    // moving cursor\r\n                    currentPosition.continue();\r\n\r\n                } else {\r\n                    // when finishes read list, resolve this Promise\r\n                    resolve(negotiationsList);\r\n                }\r\n                \r\n            };\r\n            \r\n\r\n            request.onerror = e => {\r\n                reject(`Error to Get Local Negotiations ${e.target.error}`);\r\n            };\r\n\r\n        })\r\n\r\n    }\r\n\r\n    deleteAllLocalNegotiations() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Success to delete all negotiations stored locally');\r\n\r\n            request.onerror = e => reject(`Error to delete all negotiations stored locally ${e.target.error}`);\r\n\r\n        })\r\n\r\n    }\r\n\r\n}"]}
{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negotiation","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","target","error","openCursor","negotiationsList","currentPosition","result","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,cAAd;AAEH;;;;wCAEGC,W,EAAa;AAAA;;AAEb,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,WAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAK;AACrB;AACAN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBN,mEAAiCO,EAAEC,MAAF,CAASC,KAA1C;AACH,6BAFD;AAIH,yBAhBM,CAAP;AAkBH;;;2DAEsB;AAAA;;AAEnB,+BAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGTc,UAHS,EAAd;;AAKA,gCAAIC,mBAAmB,EAAvB;;AAEAV,oCAAQI,SAAR,GAAoB,aAAK;;AAErB,oCAAIO,kBAAkBL,EAAEC,MAAF,CAASK,MAA/B;;AAEA,oCAAGD,eAAH,EAAoB;AAChB;AACA,wCAAIf,cAAce,gBAAgBE,KAAlC;;AAEA;AACAH,qDAAiBI,IAAjB,CAAsB,IAAIvB,UAAJ,CAAeK,YAAYmB,KAA3B,EAAkCnB,YAAYoB,WAA9C,EAA2DpB,YAAYqB,MAAvE,CAAtB;;AAEA;AACAN,oDAAgBO,QAAhB;AAEH,iCAVD,MAUO;AACH;AACApB,4CAAQY,gBAAR;AACH;AAEJ,6BAnBD;;AAsBAV,oCAAQK,OAAR,GAAkB,aAAK;AACnBN,4EAA0CO,EAAEC,MAAF,CAASC,KAAnD;AACH,6BAFD;AAIH,yBAnCM,CAAP;AAqCH;;;iEAE4B;AAAA;;AAEzB,+BAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGTwB,KAHS,EAAd;;AAKAnB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,mDAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB;AAAA,uCAAKN,4DAA0DO,EAAEC,MAAF,CAASC,KAAnE,CAAL;AAAA,6BAAlB;AAEH,yBAXM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n        \r\n        this._connection = connection;\r\n        this._store = 'negotiations';\r\n\r\n    }\r\n\r\n    add(negotiation) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negotiation);\r\n            \r\n            request.onsuccess = e => {\r\n                //console.log(`success to insert object`); \r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject(`Error to Insert Object ${e.target.error}`);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    getLocalNegotiations() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negotiationsList = [];\r\n\r\n            request.onsuccess = e => {\r\n\r\n                let currentPosition = e.target.result;\r\n\r\n                if(currentPosition) {\r\n                    // storing current negotiation\r\n                    let negotiation = currentPosition.value;\r\n\r\n                    // pushing it to array\r\n                    negotiationsList.push(new Negociacao(negotiation._data, negotiation._quantidade, negotiation._valor));\r\n\r\n                    // moving cursor\r\n                    currentPosition.continue();\r\n\r\n                } else {\r\n                    // when finishes read list, resolve this Promise\r\n                    resolve(negotiationsList);\r\n                }\r\n                \r\n            };\r\n            \r\n\r\n            request.onerror = e => {\r\n                reject(`Error to Get Local Negotiations ${e.target.error}`);\r\n            };\r\n\r\n        })\r\n\r\n    }\r\n\r\n    deleteAllLocalNegotiations() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Success to delete all negotiations stored locally');\r\n\r\n            request.onerror = e => reject(`Error to delete all negotiations stored locally ${e.target.error}`);\r\n\r\n        })\r\n\r\n    }\r\n\r\n}"]}